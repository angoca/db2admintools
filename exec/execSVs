#!/bin/bash

# Executes the given command in all servers defined in a file.
#
# 2013-07-09 A. Gomez (AngocA) - Creation script.
# 2013-10-03 A. Gomez (AngocA) - For's improved.

function print_usage () {
  echo "Usage: $1 { -c command } [ -i [ -a | -d | -P ] ] [ -C ] [ -E ] [ -R ] [ -v ]"
  echo " -a | --attach : Perform an attach to the instance"
  echo " -c | --command : Command to execute. Mandatory."
  echo " -C | --noconnect : Do not connect to the database, only assign DB value"
  echo " -d | --databases : Execute the command in all databases of the instance"
  echo " -E | --noeval : Do not perform an eval on the given command"
  echo " -i | --instances : Execute in all instances"
  echo " -P | --noprofile : Do not load the instance profile, just assign the"
  echo "     DB2INSTANCE value"
  echo " -R | --noremove : Do not remove the files that contain the output"
  echo " -s | --servers : Provides the servers where the command should be"
  echo "     executed. If empty, the command will use ALL servers. Mandatory."
  echo " -v | --verbose : Write verbose output. Multiple times, more output"
}

function execServer () {
  SVR=$1
  shift
  CMD=$@
  if [[ ${VERBOSE} -ge 1 ]] ; then
    echo "Command to execute: '${CMD}'"
  fi
  ssh ${SVR} "${CMD}"
}
function filter () {
  LEGAL_FILE=$1
  # Filters the legal output when connecting to a server in ssh.
  # It also deletes an empty line.
  grep -v -f ${LEGAL_FILE} | sed '/^$/N;/^\n$/D' | sed '/^$/d'
}

ATTACH=false
CONNECT=true
CONTINUE=true
DBS=false
INSTS=false
EVAL=true
LOAD_PROFILE=true
REMOVE=true
VERBOSE=0

APPL_NAME=$(basename ${0})
PARAMS="$@"

if [[ $? -ne 0 ]] ; then
  print_usage ${APPL_NAME}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true ]] ; then
  # Some parameters are for database execution.
  TEMP=$(getopt -o ac:CdEiPRis:v --long attach,command:,noconnect,databases,noeval,instances,noprofile,noremove,servers:,verbose \
                -n ${APPL_NAME} -- "$@")

  # Note the quotes around $TEMP: they are essential!
  eval set -- "${TEMP}"

  while true; do
    case "$1" in
      # If a new option is added, remember to put it in instances.
      -a | --attach ) ATTACH=true ; shift ;;
      -c | --command ) COMMAND=$2 ; shift 2 ;;
      -C | --noconnect ) CONNECT=false ; shift ;;
      -d | --databases ) DBS=true ; shift ;;
      -E | --noeval ) EVAL=false ; shift ;;
      -i | --instances ) INSTS=true ; shift ;;
      -P | --noprofile ) LOAD_PROFILE=false ; shift ;;
      -R | --noremove ) REMOVE=false ; shift ;;
      -s | --servers ) SERVERS=${2} ; shift 2 ;;
      -v | --verbose ) VERBOSE=$((${VERBOSE}+1)) ; shift ;;
      -- ) shift ; break ;;
      * ) break ;;
    esac
  done
fi

# Validates parameters.
if [[ ${CONTINUE} == true && -z ${COMMAND} ]] ; then
  echo "No command given"
  print_usage ${APPL_NAME}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true && -z ${SERVERS} ]] ; then
  echo "No servers given"
  print_usage ${APPL_NAME}
  CONTINUE=false
fi

if [[ ${DBS} == true && ${INSTS} == false ]] ; then
  echo "Invalid call: to access databases, you need to call the instances."
  print_usage ${APPL_NAME}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true && (
    ( ${ATTACH} == true && ${DBS} == true )
    || ( ${DBS} == true && ${LOAD_PROFILE} == false )
    || ( ${ATTACH} == true && ${LOAD_PROFILE} == false ) ) ]] ; then
  echo "Invalid call: attach OR databases OR noprofile"
  print_usage ${APPL_NAME}
  CONTINUE=false
fi

if [[ ${VERBOSE} -gt 1 ]] ; then
  echo "${APPL_NAME} ${PARAMS}"
  echo "attach ${ATTACH}, command '${COMMAND}', connect ${CONNECT}, dbs ${DBS}, eval ${EVAL}, insts ${INSTS}, profile ${LOAD_PROFILE}, remove ${REMOVE}, servers ${SERVERS}, verbose ${VERBOSE}"
fi

# Main execution
if [[ ${CONTINUE} == true ]] ; then
  DB2_DIR=/opt/db2/na/9.7.4
  SERVER_DIR=~/shared
  EXEC_ALL_INSTS=${SERVER_DIR}/execINs
  DATE=$(date +"%Y%m%d")
  TMP_FILE_PREFIX=/tmp/exec-${DATE}
  TMP_SERVER_FILE_PREFIX=${TMP_FILE_PREFIX}-server
  TMP_ALL_FILE_PREFIX=${TMP_FILE_PREFIX}-all-servers
  LEGAL=${SERVER_DIR}/bin/legal

  # TODO filter servers by criteria
  #SERVERS="dvmcrdb13.rouen.francetelecom.fr dvmcrdb5.rouen.francetelecom.fr"
  #SERVERS="dvdsig25.intranet-paris.francetelecom.fr dvmcrdb11.rouen.francetelecom.fr inrmcdb1.rouen.francetelecom.fr dvmcrdb1.rouen.francetelecom.fr dvmcrdb12.rouen.francetelecom.fr dvdsif49.intranet-paris.francetelecom.fr dvmcras8.rouen.francetelecom.fr dvrmcdb1.rouen.francetelecom.fr dvmcrdb13.rouen.francetelecom.fr dvmcrdb6.rouen.francetelecom.fr dvmcrdb5.rouen.francetelecom.fr inmcrdb1.rouen.francetelecom.fr dvdsik09.intranet-paris.francetelecom.fr dvdsij48.intranet-paris.francetelecom.fr dvdsij42.intranet-paris.francetelecom.fr dvdsih46.intranet-paris.francetelecom.fr dvmcrdb4.rouen.francetelecom.fr dvmcras47.rouen.francetelecom.fr"

  # Modifies the command for evaluation.
  if [[ ${EVAL} == true ]] ; then
    FINAL_COMMAND="eval ${COMMAND}"
  else
    FINAL_COMMAND="${COMMAND}"
  fi

  # Executes the command.
  if [[ ${INSTS} == true ]] ; then
    if [[ ${VERBOSE} -ge 1 ]] ; then
      echo "Servers: Option 1"
    fi
    # Takes the parameters
    if [[ ${ATTACH} == true ]] ; then
      PARAM_ATTACH="-a"
    fi
    if [[ ${DBS} == true ]] ; then
      PARAM_DBS="-d"
    fi
    if [[ ${CONNECT} == false ]] ; then
      PARAM_CONNECT="-C"
    fi
    if [[ ${EVAL} == false ]] ; then
      PARAM_EVAL="-E"
    fi
    if [[ ${PROFILE} == false ]] ; then
      PARAM_PROFILE="-P"
    fi
    if [[ ${REMOVE} == false ]] ; then
      PARAM_REMOVE="-R"
    fi
    if [[ ${VERBOSE} -eq 1 ]] ; then
      PARAM_VERBOSE="-v"
    fi
    if [[ ${VERBOSE} -eq 2 ]] ; then
      PARAM_VERBOSE="-vv"
    fi
    if [[ ${VERBOSE} -eq 3 ]] ; then
      PARAM_VERBOSE="-vvv"
    fi

    if [[ ${VERBOSE} -ge 1 ]] ; then
      echo "Servers - Step 1"
    fi
    for SERVER in ${SERVERS} ; do
      echo "Executing at ${SERVER}"
      TMP_FILE=${TMP_SERVER_FILE_PREFIX}-${SERVER}.log
      ERR_FILE=${TMP_SERVER_FILE_PREFIX}-${SERVER}.err
      ( { execServer ${SERVER} ${EXEC_ALL_INSTS} -c \"${COMMAND}\" ${PARAM_ATTACH} ${PARAM_DBS} ${PARAM_CONNECT} ${PARAM_EVAL} ${PARAM_PROFILE} ${PARAM_REMOVE} ${PARAM_VERBOSE} -s 1 2>&1 1>&3 | filter ${LEGAL} 1>&2; } 3>&1 ) &
    done
  else 
    if [[ ${VERBOSE} -ge 1 ]] ; then
      echo "Servers: Option 2"
    fi
    for SERVER in ${SERVERS} ; do
      echo "Executing at ${SERVER}"
      TMP_FILE=${TMP_SERVER_FILE_PREFIX}-${SERVER}.log
      ERR_FILE=${TMP_SERVER_FILE_PREFIX}-${SERVER}.err
      ( { execServer ${SERVER} ${FINAL_COMMAND} 2>&1 1>&3 | filter ${LEGAL} 1>&2; } 3> ${TMP_FILE} 2> ${ERR_FILE} ) &
    done
  fi

  wait
  if [[ ${VERBOSE} -ge 3 ]] ; then
    echo ">> Press any enter to continue..."
    read
  fi

  # Second step when using instances.
  if [[ ${INSTS} == true ]] ; then
      if [[ ${VERBOSE} -ge 1 ]] ; then
        echo "Servers - Step 2"
      fi
    # Recopiling the output of each server in one file (parallel.)
    for SERVER in ${SERVERS} ; do
      echo "Retreiving from ${SERVER}"
    
      # Takes the output of the execution
      ( { execServer ${SERVER} ${EXEC_ALL_INSTS} -c \"${COMMAND}\" ${PARAM_DBS} -s 2 2>&1 1>&3 | filter ${LEGAL} 1>&2; } 3>&1 ) &
    done

    wait
    if [[ ${VERBOSE} -ge 3 ]] ; then
      echo ">> Press any enter to continue..."
      read
    fi

    # Recopiling the output of all instances
    for SERVER in ${SERVERS} ; do
      TMP_FILE=${TMP_SERVER_FILE_PREFIX}-${SERVER}.log
      ERR_FILE=${TMP_SERVER_FILE_PREFIX}-${SERVER}.err
      { execServer ${SERVER} ${EXEC_ALL_INSTS} -c \"${COMMAND}\" ${PARAM_DBS} -s 3 2>&1 1>&3 | filter ${LEGAL} 1>&2; } 3> ${TMP_FILE} 2> ${ERR_FILE}
    done
  fi

  # Recopiles the output.
  if [[ ${VERBOSE} -ge 1 ]] ; then
    echo "Servers - Step 3"
  fi
  > ${TMP_ALL_FILE_PREFIX}.log
  > ${TMP_ALL_FILE_PREFIX}.err
  for SERVER in ${SERVERS} ; do
    TMP_FILE=${TMP_SERVER_FILE_PREFIX}-${SERVER}.log
    ERR_FILE=${TMP_SERVER_FILE_PREFIX}-${SERVER}.err
    echo "Recopiling from ${SERVER}"
    echo "= Server ${SERVER} =" >> ${TMP_ALL_FILE_PREFIX}.log
    cat ${TMP_FILE} >> ${TMP_ALL_FILE_PREFIX}.log
    if [[ -s ${ERR_FILE} ]] ; then
      echo "= Server ${SERVER} =" >> ${TMP_ALL_FILE_PREFIX}.err
      cat ${ERR_FILE} >> ${TMP_ALL_FILE_PREFIX}.err
    fi
    if [[ ${REMOVE} == true ]] ; then
      rm -f ${TMP_FILE}
      rm -f ${ERR_FILE}
    fi
  done

  # Show results.
  echo "> Standard output"
  cat ${TMP_ALL_FILE_PREFIX}.log
  if [[ -s ${TMP_ALL_FILE_PREFIX}.err ]] ; then
    echo "> Standard error"
    cat ${TMP_ALL_FILE_PREFIX}.err
  fi
  if [[ ${REMOVE} == true ]] ; then
    rm -f ${TMP_ALL_FILE_PREFIX}.log
    rm -f ${TMP_ALL_FILE_PREFIX}.err
  fi
fi


