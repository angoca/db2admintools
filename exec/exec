#!/bin/bash
# The MIT License (MIT)
#
# Copyright (c) 2014 Andres Gomez Casanova
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Executes the given command in all servers defined in a file by specifying the
# environment or a list of servers.
#
# The file where the environments are defined has three columns:
#  * Host name (separated by dots.)
#  * Machine description (without spaces). This is the name shown at the
#      execution.
#  * Environment code. This is how you call the script.
#
# For example:
#    db2-server01 production PRO
#    db2-server02 tests TES
#
# The required directories to work are:
#
#  * ~/db2-shared/exec/  Set of scripts for parallel execution.
#  * ~/db2-shared/conf/  Configuration files.
#
# 2013-07-09 A. Gomez (AngocA) - Creation script.

# DB2 path
DB2_DIR=${DB2_DIR:-/opt/ibm/db2/V10.5}

export LANG=en_US

# Flag for debugging.
#set -xv

SERVER_DIR=${SERVER_DIR:-~/db2-shared}
EXEC_SERV=${SERVER_DIR}/exec/execSVs

FILE_ENVS=${SERVER_DIR}/conf/servers

# Function to show how to call the program.
function print_usage () {
  echo "Executes a command in a set of servers of a given environment. If the \
environment is null, the command is executed in the given servers. If nothing, \
it is executed in all servers."
  echo "Usage: $1 { -c \"command\" } [ -i [ -a | -d | -P ] ] [ -C ] [ -E ] \
[ -R ] [ -v ]"
  echo " -a | --attach : Perform an attach to the instance"
  echo " -c | --command : Command to execute. Mandatory."
  echo " -C | --noconnect : Do not connect to the database, only assign DB value"
  echo " -d | --databases : Execute the command in all databases of the instance"
  echo " -e | --envs : Indicates the environments where to execute the query."
  echo "     If empty, the used value will be 'servers'."
  echo "     If envs and servers are defined, envs is used."
  echo " -E | --noeval : Do not perform an eval on the given command"
  echo " -f | --firstinst : Just call the first instance."
  echo " -i | --instances : Execute in all instances"
  echo " -P | --noprofile : Do not load the instance profile, just assign the"
  echo "     DB2INSTANCE value"
  echo " -R | --noremove : Do not remove the files that contain the output"
  echo " -s | --servers : Provides the servers where the command should be"
  echo "     executed. If empty and no 'envs', the command will use ALL servers."
  echo " -v | --verbose : Write verbose output. Multiple times, more output"
}

ATTACH=false
CONNECT=true
CONTINUE=true
DBS=false
INSTS=false
EVAL=true
FIRST=false
LOAD_PROFILE=true
REMOVE=true
VERBOSE=0


APPL_NAME=$(basename ${0})
PARAMS="$@"

if [[ $? -ne 0 ]] ; then
  print_usage ${APPL_NAME}
  CONTINUE=false
fi

if [[ ${CONTINUE} == true ]] ; then
  # Some parameters are for database execution.
  TEMP=$(getopt -o ac:Cde:EfiPRis:v \
    --long attach,command:,noconnect,databases,envs:,noeval,firstinst,instances,noprofile,noremove,servers:,verbose \
    -n ${APPL_NAME} -- "$@")

  # Note the quotes around $TEMP: they are essential!
  eval set -- "${TEMP}"

  while true; do
    case "$1" in
      # If a new option is added, remember to put it in instances.
      -a | --attach ) ATTACH=true ; shift ;;
      -c | --command ) COMMAND="$2" ; shift 2 ;;
      -C | --noconnect ) CONNECT=false ; shift ;;
      -d | --databases ) DBS=true ; shift ;;
      -e | --envs ) ENVS=${2} ; shift 2 ;;
      -E | --noeval ) EVAL=false ; shift ;;
      -f | --firstinst ) FIRST=true ; shift ;;
      -i | --instances ) INSTS=true ; shift ;;
      -P | --noprofile ) LOAD_PROFILE=false ; shift ;;
      -R | --noremove ) REMOVE=false ; shift ;;
      -s | --servers ) SERVERS=${2} ; shift 2 ;;
      -v | --verbose ) VERBOSE=$((${VERBOSE}+1)) ; shift ;;
      -- ) shift ; break ;;
      * ) break ;;
    esac
  done
fi

# Validates parameters.
if [[ ${CONTINUE} == true && -z ${COMMAND} ]] ; then
  echo "No command given"
  print_usage ${APPL_NAME}
  CONTINUE=false
fi

if [[ ${VERBOSE} -gt 0 ]] ; then
  echo "${APPL_NAME} ${PARAMS}"
  echo "attach ${ATTACH}, command '${COMMAND}', connect ${CONNECT}, \
dbs ${DBS}, envs ${ENVS}, eval ${EVAL}, first %{FIRST}, insts ${INSTS}, \
profile ${LOAD_PROFILE}, remove ${REMOVE}, servers ${SERVERS}, \
verbose ${VERBOSE}"
fi

if [[ ${CONTINUE} == true && ! -r ${FILE_ENVS} ]] ; then
  echo "The Environments file does not exist"
  CONTINUE=false
elif [[ ${CONTINUE} == true ]] ; then
  while read LINE ; do
    NAME_FILE=$(echo ${LINE} | cut -d' ' -f1)
    ENV_LONG=$(echo ${LINE} | cut -d' ' -f2)
    ENV_FILE=$(echo ${LINE} | cut -d' ' -f3)
    if [[ ${VERBOSE} -gt 2 ]] ; then
      echo "LINE '${LINE}', NAME '${NAME_FILE}', ENV '${ENV_FILE}'"
    fi
    if [[ -n ${ENVS} ]] ; then
      for ENV in ${ENVS} ; do
        if [[ ${VERBOSE} -gt 2 ]] ; then
          echo "ENV '${ENV}' ?= '${ENV_FILE}'"
        fi
        if [[ ${ENV} == ${ENV_FILE} ]] ; then
          EXECUTION="${EXECUTION} ${NAME_FILE}"
          EXEC_ENVS="${EXEC_ENVS} ${ENV_LONG}"
        fi
      done
    elif [[ -z ${ENVS} && -n ${SERVERS} ]] ; then
      for SERVER in ${SERVERS} ; do
        if [[ ${VERBOSE} -gt 2 ]] ; then
          echo "SERVER '${NAME_FILE}')"
        fi
        if [[ ${SERVER} == ${NAME_FILE} ]] ; then
          EXECUTION="${EXECUTION} ${NAME_FILE}"
          EXEC_ENVS="${EXEC_ENVS} ${ENV_LONG}"
        fi
      done
    else
      EXECUTION="${EXECUTION} ${NAME_FILE}"
      EXEC_ENVS="${EXEC_ENVS} ${ENV_LONG}"
    fi
  done < ${FILE_ENVS}
fi

if [[ ${CONTINUE} == true && -z ${EXECUTION} ]] ; then
  echo "No servers defined"
elif [[ ${CONTINUE} == true ]] ; then
  echo "Executing at:${EXEC_ENVS}"
  # Takes the parameters
  if [[ ${ATTACH} == true ]] ; then
    PARAM_ATTACH="-a"
  fi
  if [[ ${CONNECT} == false ]] ; then
    PARAM_CONNECT="-C"
  fi
  if [[ ${DBS} == true ]] ; then
    PARAM_DBS="-d"
  fi
  if [[ ${EVAL} == false ]] ; then
    PARAM_EVAL="-E"
  fi
  if [[ ${FIRST} == true ]] ; then
    PARAM_FIRST="-f"
  fi
  if [[ ${INSTS} == true ]] ; then
    PARAM_INSTS="-i"
  fi
  if [[ ${PROFILE} == false ]] ; then
    PARAM_PROFILE="-P"
  fi
  if [[ ${REMOVE} == false ]] ; then
    PARAM_REMOVE="-R"
  fi
  if [[ ${VERBOSE} -eq 1 ]] ; then
    PARAM_VERBOSE="-v"
  fi
  if [[ ${VERBOSE} -eq 2 ]] ; then
    PARAM_VERBOSE="-vv"
  fi
  if [[ ${VERBOSE} -eq 3 ]] ; then
    PARAM_VERBOSE="-vvv"
  fi
  if [[ ${VERBOSE} -gt 0 ]] ; then
    echo "${EXEC_SERV} -c \"${COMMAND}\" -s \"${EXECUTION}\" ${PARAM_COMMAND} \
      ${PARAM_ATTACH} ${PARAM_INSTS} ${PARAM_DBS} ${PARAM_CONNECT} \
      ${PARAM_EVAL} ${PARAM_FIRST} ${PARAM_PROFILE} ${PARAM_REMOVE} \
      ${PARAM_VERBOSE}"
  fi
  ${EXEC_SERV} -c "${COMMAND}" -s "${EXECUTION}" ${PARAM_COMMAND} \
    ${PARAM_ATTACH} ${PARAM_INSTS} ${PARAM_DBS} ${PARAM_CONNECT} \
    ${PARAM_EVAL} ${PARAM_FIRST} ${PARAM_PROFILE} ${PARAM_REMOVE} \
    ${PARAM_VERBOSE}
fi


